[{"path":"https://irods.github.io/irods_client_library_rirods/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 rirods authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"contributing-to-rirods-development","dir":"Articles","previous_headings":"","what":"Contributing to rirods development","title":"Developing rirods","text":"contribute rirods fork source files : https://github.com/irods/irods_client_library_rirods, make Pull Request.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"prerequisites-r","dir":"Articles","previous_headings":"","what":"Prerequisites R","title":"Developing rirods","text":"following R packages furthermore required development: xml2, jsonlite, readr, testthat (>= 3.0.0), knitr, rmarkdown, spelling, httptest2. convenience, one can also use renv () renv::restore() install dependencies. usethis devtools packages suggestions streamline development. See devtools usethis common development tasks setups covered packages. Development rirods relies httptest2 enables testing logic R side API without requiring access remote service. recording API response mock files. mock files stored several directories tests/testthat/.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"prerequisites-irods","dir":"Articles","previous_headings":"","what":"Prerequisites iRODS","title":"Developing rirods","text":"unit test included source files can either run local remote iRODS C++ REST API service, version 0.9.3 later - https://github.com/irods/irods_client_rest_cpp.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"local-server","dir":"Articles","previous_headings":"Prerequisites iRODS","what":"Local server","title":"Developing rirods","text":"Launch local demonstration iRODS service (including REST API): Alternatively, one can use R function use_irods_demo(). Note, options can used Docker Docker-compose plugin installed. result demonstration REST API running http://localhost/irods-rest/0.9.3 (later version). configuration R needed development (except removing possible mock files). example, run unit tests local server use: devtools::test(). miscellaneous development tasks one can, furthermore, use: usethis::local_project. test fixture uses alternative directory working directory thereby preventing cluttering package source files (defaults temporary directory). working directory can restored package directory restarting R session (possibly CTRL + SHIFT + F10) running withr::deferred_run().","code":"# clone the repository (and submodule \"irods_demo\") # or use `git submodule update --init` when already cloned without submodules git clone --recurse-submodules https://github.com/irods/irods_demo # start the REST API cd irods_demo docker-compose up -d nginx-reverse-proxy"},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"remote-server","dir":"Articles","previous_headings":"Prerequisites iRODS","what":"Remote server","title":"Developing rirods","text":"Testing remote server requires specification server information. information needs entered .Rprofile file: server information stored environmental variables DEV_HOST_IRODS ,DEV_ZONE_PATH_IRODS, DEV_USER, DEV_PASS. Server information provided scrambled format prevent leakage sensitive information GitHub. following step needed scramble information. Generate package development key: Store package development key environmental variable user level. convenience one can use usethis::edit_r_environ() opens .Renviron file. Enter key replacing <key> follows: Scramble iRODS server information httr2::secret_encrypt(). example, scramble host name follows: Store scrambled information designated places project level .Rprofile: host name DEV_HOST_IRODS, zone path DEV_ZONE_PATH_IRODS (e.g., \"/tempZone/home\"), user name DEV_USER, password DEV_PASS. Restart R sessions (possibly CTRL + SHIFT + F10). Note unit tests built clean server one user (.e., DEV_USER).","code":"# dependency management options(renv.settings.snapshot.type = \"explicit\") source(\"renv/activate.R\")  # development key (create key with httr2::secret_make_key() and place in user # level environment variables. One can use usethis::edit_r_environ() for this. # Store the key under \"DEV_KEY_IRODS\")  # iRODS environment variables for development Sys.setenv(DEV_HOST_IRODS = \"nLO8T0IpHCT2kXklYE-IB0HjYpNkg5wN4ZKk7TPSvkwGf9FauDR-O5mVI-mmD2_zNFGLoaVcAgYl\") Sys.setenv(DEV_ZONE_PATH_IRODS = \"gunp5Ts08NHfpKAdbFCBuilVb7Wjnxojbt7bA1e-9Q\") Sys.setenv(DEV_USER = \"ZGlORquE2G6BIPS5JAcuPcngmBB6Wg\") Sys.setenv(DEV_PASS = \"ZGlORquE2G6BIPS5JAcuPcngmBB6Wg\") httr2::secret_make_key() DEV_KEY_IRODS=\"<key>\" httr2::secret_encrypt(\"http://myserver/irods-rest/0.9.3\" ,\"DEV_KEY_IRODS\")"},{"path":"https://irods.github.io/irods_client_library_rirods/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Schobben. Author, maintainer, copyright holder. Mariana Montes. Author. Terrell Russell. Contributor. Christine Staiger. Contributor. Ton Smeele. Contributor. Alan King. Contributor.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schobben, M., Montes, M., (2023) R Client iRODS, Version = 0.1.0, https://github.com/irods/irods_client_library_rirods","code":"@Manual{,   title = {R Client for iRODS},   author = {Martin Schobben and Mariana Montes},   year = {2023},   version = {0.1.0},   url = {https://github.com/irods/irods_client_library_rirods}, }"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"rirods","dir":"","previous_headings":"","what":"R Client for iRODS","title":"R Client for iRODS","text":"rirods package R client iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client for iRODS","text":"can install development version rirods like : , development version GitHub, like :","code":"install.packages(\"rirods\") # install.packages(\"devtools\") devtools::install_github(\"irods/irods_client_library_rirods\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"R Client for iRODS","text":"package connects iRODS C++ REST API - https://github.com/irods/irods_client_rest_cpp. Launch local demonstration iRODS service (including REST API): result demonstration REST API running http://localhost/irods-rest/0.9.3 (later version). Docker containers designed easily stand DEMONSTRATION iRODS server. intended education exploration. USE PRODUCTION","code":"# load library(rirods) # setup a mock iRODS server (https://github.com/irods/irods_demo) use_irods_demo(\"alice\", \"passWORD\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"R Client for iRODS","text":"connect REST API endpoint choice, load rirods, connect create_irods(), authenticate iRODS credentials:","code":"# connect create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"authentication","dir":"","previous_headings":"Example Usage","what":"authentication","title":"R Client for iRODS","text":"example Alice user iRODS can authenticate iauth(). prompts dialog can enter username password without hardcoding information scripts.","code":"# login as alice with password \"passWORD\" iauth() # or iauth(\"alice\", \"passWORD\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"save-r-objects","dir":"","previous_headings":"Example Usage","what":"save R objects","title":"R Client for iRODS","text":"Suppose Alice like upload R object current R session iRODS collection. , use isaveRDS() command:","code":"# some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # check where we are in the iRODS namespace ipwd() #> [1] \"/tempZone/home/alice\"  # store data in iRODS isaveRDS(foo, \"foo.rds\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"metadata","dir":"","previous_headings":"Example Usage","what":"metadata","title":"R Client for iRODS","text":"truly appreciate strength iRODS, can add metadata describes data object “foo”:","code":"# add some metadata imeta(   \"foo.rds\",    \"data_object\",    operations =      data.frame(operation = \"add\", attribute = \"foo\", value = \"bar\", units = \"baz\") )  # check if file is stored with associated metadata ils(metadata = TRUE) #>  #> ======== #> metadata #> ======== #> /tempZone/home/alice/foo.rds : #>  attribute value units #>        foo   bar   baz #>  #>  #> ========== #> iRODS Zone #> ========== #>                  logical_path        type #>  /tempZone/home/alice/foo.rds data_object"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"read-r-objects","dir":"","previous_headings":"Example Usage","what":"read R objects","title":"R Client for iRODS","text":"Alice wanted copy foo R object iRODS collection current R session, use ireadRDS():","code":"# retrieve in native R format ireadRDS(\"foo.rds\") #>   x y #> 1 1 x #> 2 8 y #> 3 9 z"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"csv","dir":"","previous_headings":"Example Usage","what":"csv","title":"R Client for iRODS","text":"Possibly Alice want native R object stored iRODS file type can accessed programs. , use iput() command: Later somebody else might want download file store locally:","code":"library(readr)  # creates a csv file of foo write_csv(foo, \"foo.csv\")  # send file iput(\"foo.csv\", \"foo.csv\")  # check whether it is stored ils() #>  #> ========== #> iRODS Zone #> ========== #>                  logical_path        type #>  /tempZone/home/alice/foo.csv data_object #>  /tempZone/home/alice/foo.rds data_object # retrieve it again later iget(\"foo.csv\", \"foo.csv\") read_csv(\"foo.csv\") #> Rows: 3 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): y #> dbl (1): x #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>       x y     #>   <dbl> <chr> #> 1     1 x     #> 2     8 y     #> 3     9 z"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"query","dir":"","previous_headings":"Example Usage","what":"query","title":"R Client for iRODS","text":"adding metadata others can easily discover data future projects. Objects can searched General Queries iquery():","code":"# look for objects in the home collection with a wildcard `%` iquery(\"SELECT COLL_NAME, DATA_NAME WHERE COLL_NAME LIKE '/tempZone/home/%'\") #>      [,1]                   [,2]      #> [1,] \"/tempZone/home/alice\" \"foo.csv\" #> [2,] \"/tempZone/home/alice\" \"foo.rds\"  # or for data objects with a name that starts with \"foo\" iquery(\"SELECT COLL_NAME, DATA_NAME WHERE DATA_NAME LIKE 'foo%'\") #>      [,1]                   [,2]      #> [1,] \"/tempZone/home/alice\" \"foo.csv\" #> [2,] \"/tempZone/home/alice\" \"foo.rds\""},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"cleanup","dir":"","previous_headings":"Example Usage","what":"cleanup","title":"R Client for iRODS","text":"Finally, can clean Alice’s home collection:","code":"# delete object irm(\"foo.rds\", force = TRUE) irm(\"foo.csv\", force = TRUE)  # check if objects are removed ils() #> This collection does not contain any objects or collections.  # close the server stop_irods_demo() # optionally remove the Docker images # irods:::remove_docker_images()"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/as.data.frame.irods_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a Data Frame — as.data.frame.irods_df","title":"Coerce to a Data Frame — as.data.frame.irods_df","text":"Coerce iRODS Zone information class data.frame().","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/as.data.frame.irods_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a Data Frame — as.data.frame.irods_df","text":"","code":"# S3 method for irods_df as.data.frame(x, ...)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/as.data.frame.irods_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a Data Frame — as.data.frame.irods_df","text":"x irods_df class object. ... Currently implemented","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/as.data.frame.irods_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a Data Frame — as.data.frame.irods_df","text":"Returns data.frame. Note, columns metadata consists list data frames, status_information permission_information consist data frames.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/as.data.frame.irods_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a Data Frame — as.data.frame.irods_df","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store data in iRODS isaveRDS(foo, \"foo.rds\")  # add some metadata imeta(   \"foo.rds\",   \"data_object\",   operations =     data.frame(operation = \"add\", attribute = \"foo\", value = \"bar\",       units = \"baz\") )  # iRODS Zone with metadata irods_zone <- ils(metadata = TRUE)  # check class class(irods_zone) #> [1] \"irods_df\"  # coerce into `data.frame` and extract metadata of \"foo.rds\" irods_zone <- as.data.frame(irods_zone) irods_zone[basename(irods_zone$logical_path) == \"foo.rds\", \"metadata\"] #> [[1]] #>   attribute value units #> 1       foo   bar   baz #>   # delete object irm(\"foo.rds\", force = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate IRODS Configuration File — create_irods","title":"Generate IRODS Configuration File — create_irods","text":"create iRODS configuration file containing information iRODS server. file created, future sessions connect iRODS server without intervention.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate IRODS Configuration File — create_irods","text":"","code":"create_irods(host, zone_path, overwrite = FALSE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate IRODS Configuration File — create_irods","text":"host URL host. zone_path Path zone iRODS server (e.g., \"/tempZone/home\"). overwrite Overwrite existing iRODS configuration file. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate IRODS Configuration File — create_irods","text":"Invisibly, path iRODS configuration file.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate IRODS Configuration File — create_irods","text":"configuration file located user-specific configuration directory. destination set R_USER_CONFIG_DIR set. Otherwise, follows platform conventions (see also rappdirs::user_config_dir()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iadmin.html","id":null,"dir":"Reference","previous_headings":"","what":"The Administration Interface to iRODS — iadmin","title":"The Administration Interface to iRODS — iadmin","text":"Note function can used admin rights.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iadmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Administration Interface to iRODS — iadmin","text":"","code":"iadmin(   action,   target,   arg2 = character(1),   arg3 = character(1),   arg4 = character(1),   arg5 = character(1),   arg6 = character(1),   arg7 = character(1),   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iadmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Administration Interface to iRODS — iadmin","text":"action action: add, modify, remove. target subject action: user, zone, resource, childtoresc, arg2 arg2 arg3 arg3 arg4 arg4 arg5 arg5 arg6 arg6 arg7 arg7 verbose Show information http request response. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iadmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Administration Interface to iRODS — iadmin","text":"Invisible http status.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iadmin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Administration Interface to iRODS — iadmin","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth(\"rods\", \"rods\")  # add user iadmin(action = \"add\", target = \"user\", arg2 = \"Bob\", arg3 = \"rodsuser\")  # add user password iadmin(action = \"modify\", target = \"user\", arg2 = \"Bob\", arg3 = \"password\",   arg4 = \"pass\")  # delete user iadmin(action = \"remove\", target = \"user\", arg2 = \"Bob\")"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authentication Service for an iRODS Zone — iauth","title":"Authentication Service for an iRODS Zone — iauth","text":"Provides authentication service iRODS zone. Using function without arguments results prompt asking user name password thereby preventing hard-coding sensitive information scripts.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authentication Service for an iRODS Zone — iauth","text":"","code":"iauth(user = NULL, password = NULL, role = \"rodsuser\")"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authentication Service for an iRODS Zone — iauth","text":"user iRODS user name (prompts user user name supplied). password iRODS password (prompts user password supplied). role iRODS role user (defaults \"rodsuser\").","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authentication Service for an iRODS Zone — iauth","text":"Invisibly NULL.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authentication Service for an iRODS Zone — iauth","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Current Working Directory in iRODS — icd","title":"Get or Set Current Working Directory in iRODS — icd","text":"ipwd() icd() iRODS equivalents getwd() setwd() respectively. example, whereas getwd() returns current working directory local system, ipwd() returns current working directory iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Current Working Directory in iRODS — icd","text":"","code":"icd(dir)  ipwd()"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Current Working Directory in iRODS — icd","text":"dir Collection set working directory.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or Set Current Working Directory in iRODS — icd","text":"Invisibly current directory change (convention setwd()).","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Current Working Directory in iRODS — icd","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # default dir icd(\".\") ipwd() #> [1] \"/tempZone/home/rods\"  # relative paths work as well icd(\"/tempZone/home\") ipwd() #> [1] \"/tempZone/home\"  # go back on level lower icd(\"..\") ipwd() #> [1] \"/tempZone\"  # absolute paths work as well icd(\"/tempZone/home/rods\") ipwd() #> [1] \"/tempZone/home/rods\"  # back home icd(\"/tempZone/home\")"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve File or Object from iRODS — iget","title":"Retrieve File or Object from iRODS — iget","text":"Transfer file iRODS local storage iget() read R object RDS file iRODS ireadRDS() (see readRDS()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve File or Object from iRODS — iget","text":"","code":"iget(   logical_path,   local_path,   offset = 0,   count = 2000L,   verbose = FALSE,   overwrite = FALSE )  ireadRDS(   logical_path,   offset = 0,   count = 2000L,   verbose = FALSE,   overwrite = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve File or Object from iRODS — iget","text":"logical_path Source path iRODS. local_path Destination path local storage. offset Offset bytes data object. Defaults 0. count Maximum number bytes write. Defaults 2000. verbose Whether information printed HTTP request response. Defaults FALSE. overwrite Whether local file overwritten exists. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve File or Object from iRODS — iget","text":"R object case ireadRDS(), invisibly NULL case iget().","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve File or Object from iRODS — iget","text":"","code":"is_irods_demo_running() #> [1] TRUE  # \\dontshow{ .old_wd <- setwd(tempdir()) # } # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # save the iris dataset as csv and send the file to iRODS write.csv(iris, \"iris.csv\") iput(\"iris.csv\", \"iris.csv\")  # bring the file back with a different name iget(\"iris.csv\", \"newer_iris.csv\") file.exists(\"newer_iris.csv\") # check that it has been transferred #> [1] TRUE  # send an R object to iRODS in RDS format isaveRDS(iris, \"irids_in_rds.rds\")  # read it back iris_again <- ireadRDS(\"irids_in_rds.rds\") iris_again #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica  # delete objects in iRODS irm(\"irids_in_rds.rds\", force = TRUE) irm(\"iris.csv\", force = TRUE)  # \\dontshow{ setwd(.old_wd) # }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":null,"dir":"Reference","previous_headings":"","what":"List iRODS Data Objects and Collections — ils","title":"List iRODS Data Objects and Collections — ils","text":"List contents collection, optionally stat, metadata, /access control information element collection.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List iRODS Data Objects and Collections — ils","text":"","code":"ils(   logical_path = \".\",   stat = FALSE,   permissions = FALSE,   metadata = FALSE,   offset = 0,   limit = 100,   message = TRUE,   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List iRODS Data Objects and Collections — ils","text":"logical_path Path collection whose contents listed. default current working collection (see ipwd()). stat Whether stat information included. Defaults FALSE. permissions Whether access control information included. Defaults FALSE. metadata Whether metadata information included. Defaults FALSE. offset Number records skip pagination. Defaults 0. limit Number records show per page. Defaults 100. message Whether message printed collection empty. Defaults TRUE. verbose Whether information printed HTTP request response. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List iRODS Data Objects and Collections — ils","text":"Dataframe logical paths , requested, additional information.","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List iRODS Data Objects and Collections — ils","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # list home directory ils() #> This collection does not contain any objects or collections.  # make collection imkdir(\"some_collection\")  # list a different directory ils(\"/tempZone/home/rods/some_collection\") #> This collection does not contain any objects or collections.  # show metadata ils(metadata = TRUE) #>  #> ======== #> metadata #> ======== #> /tempZone/home/rods/some_collection : #> list() #>  #>  #> ========== #> iRODS Zone #> ========== #>                         logical_path       type #>  /tempZone/home/rods/some_collection collection  # delete `some_collection` irm(\"some_collection\", force = TRUE, recursive = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or Remove Metadata — imeta","title":"Add or Remove Metadata — imeta","text":"iRODS, metadata stored attribute-value-units triples (AVUs), consisting attribute name, attribute value optional unit. function allows chain several operations ('add' 'remove') linked specific AVUs. Read metadata looking iCommands equivalent imeta iRODS Docs.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or Remove Metadata — imeta","text":"","code":"imeta(   logical_path,   entity_type = c(\"data_object\", \"collection\", \"user\"),   operations = list(),   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or Remove Metadata — imeta","text":"logical_path Path data object collection (name user). entity_type Type item add metadata remove . Options 'data_object', 'collection' 'user'. operations List named lists data.frame representing operations. valid components lists vectors : operation, values 'add' 'remove', depending whether AVU added removed metadata item (required). attribute, name AVU (required). value, value AVU (required). units, unit AVU (optional). verbose Whether information printed HTTP request response. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or Remove Metadata — imeta","text":"Invisibly, HTTP response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add or Remove Metadata — imeta","text":"https://docs.irods.org/master/icommands/metadata/","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or Remove Metadata — imeta","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth(\"rods\", \"rods\")  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store isaveRDS(foo, \"foo.rds\")  # check if file is stored ils() #>  #> ========== #> iRODS Zone #> ========== #>                 logical_path        type #>  /tempZone/home/rods/foo.rds data_object  # add some metadata imeta(   \"foo.rds\",   \"data_object\",    operations =     list(      list(operation = \"add\", attribute = \"foo\", value = \"bar\", units = \"baz\")    ) )  # `operations` can contain multiple tags supplied as a `data.frame` imeta(   \"foo.rds\",   \"data_object\",   operations = data.frame(     operation = c(\"add\", \"add\"),     attribute = c(\"foo2\", \"foo3\"),     value = c(\"bar2\", \"bar3\"),     units = c(\"baz2\", \"baz3\")    )  )  # or again as a list of lists imeta(   \"foo.rds\",   \"data_object\",   operations = list(     list(operation = \"add\", attribute = \"foo4\", value = \"bar4\", units = \"baz4\"),     list(operation = \"add\", attribute = \"foo5\", value = \"bar5\", units = \"baz5\")   ) )  # list of lists are useful as AVUs don't have to contain units imeta(   \"foo.rds\",   \"data_object\",   operations = list(     list(operation = \"add\", attribute = \"foo6\", value = \"bar6\"),     list(operation = \"add\", attribute = \"foo7\", value = \"bar7\", units = \"baz7\")   ) )  # check if file is stored with associated metadata ils(metadata = TRUE) #>  #> ======== #> metadata #> ======== #> /tempZone/home/rods/foo.rds : #>  attribute value units #>        foo   bar   baz #>       foo2  bar2  baz2 #>       foo3  bar3  baz3 #>       foo4  bar4  baz4 #>       foo5  bar5  baz5 #>       foo6  bar6       #>       foo7  bar7  baz7 #>  #>  #> ========== #> iRODS Zone #> ========== #>                 logical_path        type #>  /tempZone/home/rods/foo.rds data_object  # delete object irm(\"foo.rds\", force = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New Collection in iRODS — imkdir","title":"Create a New Collection in iRODS — imkdir","text":"equivalent dir.create(), creating collection iRODS instead local directory.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New Collection in iRODS — imkdir","text":"","code":"imkdir(logical_path, create_parent_collections = FALSE, verbose = FALSE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New Collection in iRODS — imkdir","text":"logical_path Path collection create, relative current working directory (see ipwd()). create_parent_collections Whether parent collections created necessary. Defaults FALSE. verbose Whether information HTTP request response printed. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New Collection in iRODS — imkdir","text":"Invisibly HTTP request.","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New Collection in iRODS — imkdir","text":"","code":"is_irods_demo_running() #> [1] TRUE  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth(\"rods\", \"rods\")  # list all object and collection in the current collection of iRODS ils() #> This collection does not contain any objects or collections.  # create a new collection imkdir(\"new_collection\")  # check if it is there ils() #>  #> ========== #> iRODS Zone #> ========== #>                        logical_path       type #>  /tempZone/home/rods/new_collection collection  # and move to the new directory icd(\"new_collection\")  # remove collection icd(\"..\") irm(\"new_collection\", force = TRUE, recursive = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Files and Objects in iRODS — iput","title":"Save Files and Objects in iRODS — iput","text":"Store object file iRODS. iput() used transfer file local storage iRODS; isaveRDS() saves R object current environment iRODS RDS format (see saveRDS()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Files and Objects in iRODS — iput","text":"","code":"iput(   local_path,   logical_path,   offset = 0,   count = 2000L,   truncate = TRUE,   verbose = FALSE,   overwrite = FALSE )  isaveRDS(   x,   logical_path,   offset = 0,   count = 2000L,   truncate = TRUE,   verbose = FALSE,   overwrite = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Files and Objects in iRODS — iput","text":"local_path Local path file sent iRODS. logical_path Destination path iRODS. offset Offset bytes data object. Defaults 0. count Maximum number bytes write. Defaults 2000. truncate Whether truncate object opening . Defaults TRUE. verbose Whether print information HTTP request response. Defaults FALSE. overwrite Whether file iRODS overwritten exists. Defaults FALSE. x R object save iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Files and Objects in iRODS — iput","text":"(Invisibly) HTTP response.","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Files and Objects in iRODS — iput","text":"","code":"is_irods_demo_running() #> [1] TRUE  # \\dontshow{ .old_wd <- setwd(tempdir()) # } # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # save the iris dataset as csv and send the file to iRODS write.csv(iris, \"iris.csv\") iput(\"iris.csv\", \"iris.csv\")  # save with a different name iput(\"iris.csv\", \"iris_in_irods.csv\") ils() #>  #> ========== #> iRODS Zone #> ========== #>                           logical_path        type #>           /tempZone/home/rods/iris.csv data_object #>  /tempZone/home/rods/iris_in_irods.csv data_object  # send an R object to iRODS in RDS format isaveRDS(iris, \"iris_in_rds.rds\")  # delete objects in iRODS irm(\"iris_in_irods.csv\", force = TRUE) irm(\"iris_in_rds.rds\", force = TRUE) irm(\"iris.csv\", force = TRUE)  # \\dontshow{ setwd(.old_wd) # }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Data Objects and Collections in iRODS — iquery","title":"Query Data Objects and Collections in iRODS — iquery","text":"Use SQL-like expressions query data objects collections based different properties. Read queries looking iCommands equivalent iquest iRODS Docs.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Data Objects and Collections in iRODS — iquery","text":"","code":"iquery(   query,   limit = 100,   offset = 0,   type = c(\"general\", \"specific\"),   case_sensitive = TRUE,   distinct = TRUE,   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Data Objects and Collections in iRODS — iquery","text":"query GeneralQuery searching iCAT database. limit Maximum number rows return. Defaults 100. offset Number rows skip paging. Defaults 0. type Type query: 'general' (default) 'specific'. case_sensitive Whether string matching query case sensitive. Defaults TRUE. distinct Whether distinct rows listed. Defaults TRUE. verbose Whether information printed HTTP request response. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Data Objects and Collections in iRODS — iquery","text":"Invisibly, HTTP response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Query Data Objects and Collections in iRODS — iquery","text":"https://docs.irods.org/master/icommands/user/#iquest","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Data Objects and Collections in iRODS — iquery","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth(\"rods\", \"rods\")  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store isaveRDS(foo, \"foo.rds\")  # add metadata imeta(   \"foo.rds\",   \"data_object\",   operations =     list(       list(operation = \"add\", attribute = \"bar\", value = \"baz\")   ) )  # search for objects by metadata iquery(\"SELECT COLL_NAME, DATA_NAME WHERE META_DATA_ATTR_NAME LIKE 'bar%'\") #>      [,1]                  [,2]      #> [1,] \"/tempZone/home/rods\" \"foo.rds\"  # delete object irm(\"foo.rds\", force = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Data Objects or Collections in iRODS — irm","title":"Remove Data Objects or Collections in iRODS — irm","text":"equivalent file.remove(), applied item inside iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Data Objects or Collections in iRODS — irm","text":"","code":"irm(logical_path, force = TRUE, recursive = FALSE, verbose = FALSE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Data Objects or Collections in iRODS — irm","text":"logical_path Path data object collection remove. force Whether data object collection deleted permanently. FALSE, sent trash collection. Defaults TRUE. recursive collection provided, whether contents also removed. collection empty recursive FALSE, deleted. Defaults FALSE. verbose Whether information printed HTTP request response. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Data Objects or Collections in iRODS — irm","text":"Invisibly HTTP call.","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Data Objects or Collections in iRODS — irm","text":"","code":"# demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store isaveRDS(foo, \"foo.rds\")  # check if file is stored ils() #>  #> ========== #> iRODS Zone #> ========== #>                 logical_path        type #>  /tempZone/home/rods/foo.rds data_object  # delete object irm(\"foo.rds\", force = TRUE)  # check if file is deleted ils() #> This collection does not contain any objects or collections."},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irods_rest_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to coordinate iRODS REST call — irods_rest_call","title":"Internal function to coordinate iRODS REST call — irods_rest_call","text":"Internal function coordinate iRODS REST call","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irods_rest_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to coordinate iRODS REST call — irods_rest_call","text":"","code":"irods_rest_call(endpoint, verb, args, verbose, object = NULL, error = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irods_rest_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to coordinate iRODS REST call — irods_rest_call","text":"endpoint REST API end-point. verb HTTP verb used (e.g. PUT). args arguments set end-point. verbose Verbosity HTTP request. object Data send along HTTP request. error Whether status codes larger 400 translated errors.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irods_rest_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to coordinate iRODS REST call — irods_rest_call","text":"HTTP response","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irods_rest_call.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Internal function to coordinate iRODS REST call — irods_rest_call","text":"https://github.com/irods/irods_demo/tree/main/irods_client_rest_cpp","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_connected_irods.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicate for iRODS Connectivity — is_connected_irods","title":"Predicate for iRODS Connectivity — is_connected_irods","text":"predicate check whether currently connected iRODS server.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_connected_irods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicate for iRODS Connectivity — is_connected_irods","text":"","code":"is_connected_irods(...)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_connected_irods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicate for iRODS Connectivity — is_connected_irods","text":"... Currently implemented.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_connected_irods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicate for iRODS Connectivity — is_connected_irods","text":"Boolean whether connection iRODS exists.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_connected_irods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicate for iRODS Connectivity — is_connected_irods","text":"","code":"is_connected_irods() #> [1] TRUE"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_irods_demo_running.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicate for iRODS Demonstration Service State — is_irods_demo_running","title":"Predicate for iRODS Demonstration Service State — is_irods_demo_running","text":"predicate check whether running iRODS docker demo containers.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_irods_demo_running.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicate for iRODS Demonstration Service State — is_irods_demo_running","text":"","code":"is_irods_demo_running(...)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_irods_demo_running.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicate for iRODS Demonstration Service State — is_irods_demo_running","text":"... Currently implemented.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_irods_demo_running.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicate for iRODS Demonstration Service State — is_irods_demo_running","text":"Boolean whether connected iRODS","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/is_irods_demo_running.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicate for iRODS Demonstration Service State — is_irods_demo_running","text":"","code":"is_irods_demo_running() #> [1] TRUE"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/local_create_irods.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch iRODS from Alternative Directory — local_create_irods","title":"Launch iRODS from Alternative Directory — local_create_irods","text":"function useful development prevents cluttering package source files.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/local_create_irods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch iRODS from Alternative Directory — local_create_irods","text":"","code":"local_create_irods(   host = NULL,   zone_path = NULL,   dir = tempdir(),   env = parent.frame() )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/local_create_irods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch iRODS from Alternative Directory — local_create_irods","text":"host Hostname iRODS server. Defaults \"http://localhost/irods-rest/0.9.3\". zone_path Zone path iRODS server. Defaults \"/tempZone/home\". dir directory use. Default temporary directory. env Attach exit handlers environment. Defaults parent frame (accessed parent.frame()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/local_create_irods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch iRODS from Alternative Directory — local_create_irods","text":"Invisibly returns original directory.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/new_irods_df.html","id":null,"dir":"Reference","previous_headings":"","what":"iRODS Zone Information Class — new_irods_df","title":"iRODS Zone Information Class — new_irods_df","text":"iRODS Zone Information Class","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/new_irods_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iRODS Zone Information Class — new_irods_df","text":"","code":"new_irods_df(x = list())"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/new_irods_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iRODS Zone Information Class — new_irods_df","text":"x list iRODS Zone information.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/new_irods_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iRODS Zone Information Class — new_irods_df","text":"irods_df class object.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/print.irods_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for iRODS Data Frame Class. — print.irods_df","title":"Print Method for iRODS Data Frame Class. — print.irods_df","text":"Print Method iRODS Data Frame Class.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/print.irods_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for iRODS Data Frame Class. — print.irods_df","text":"","code":"# S3 method for irods_df print(   x,   ...,   digits = NULL,   quote = FALSE,   right = TRUE,   row.names = FALSE,   max = NULL )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/print.irods_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for iRODS Data Frame Class. — print.irods_df","text":"x object class irods_df. ... optional arguments print methods. digits minimum number significant digits used: see     print.default. quote logical, indicating whether entries     printed surrounding quotes. right logical, indicating whether strings     right-aligned.  default right-alignment. row.names logical (character vector), indicating whether (    ) row names printed. max numeric NULL, specifying maximal number     entries printed.  default, NULL,     getOption(\"max.print\") used.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/print.irods_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for iRODS Data Frame Class. — print.irods_df","text":"Invisibly return class irods_df object.","code":""},{"path":[]},{"path":"https://irods.github.io/irods_client_library_rirods/reference/print.irods_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for iRODS Data Frame Class. — print.irods_df","text":"","code":"is_irods_demo_running() #> [1] TRUE  # demonstration server (requires Bash, Docker and Docker-compose) # use_irods_demo()  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth(\"rods\", \"rods\")  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store data in iRODS isaveRDS(foo, \"foo.rds\")  # add some metadata imeta(   \"foo.rds\",   \"data_object\",   operations =    data.frame(operation = \"add\", attribute = \"foo\", value = \"bar\",      units = \"baz\") )  # iRODS Zone with metadata irods_zone <- ils(metadata = TRUE)  # print (default no row.names) print(irods_zone) #>  #> ======== #> metadata #> ======== #> /tempZone/home/rods/foo.rds : #>  attribute value units #>        foo   bar   baz #>  #>  #> ========== #> iRODS Zone #> ========== #>                 logical_path        type #>  /tempZone/home/rods/foo.rds data_object  # with row.names print(irods_zone, row.names = TRUE) #>  #> ======== #> metadata #> ======== #> /tempZone/home/rods/foo.rds : #>   attribute value units #> 1       foo   bar   baz #>  #>  #> ========== #> iRODS Zone #> ========== #>                  logical_path        type #> 1 /tempZone/home/rods/foo.rds data_object  # delete object irm(\"foo.rds\", force = TRUE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/remove_docker_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Docker images from system — remove_docker_images","title":"Remove Docker images from system — remove_docker_images","text":"Remove Docker images system","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/remove_docker_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Docker images from system — remove_docker_images","text":"","code":"remove_docker_images()"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/remove_docker_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Docker images from system — remove_docker_images","text":"Invisible","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/remove_mock_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove http snapshots or mockfiles — remove_mock_files","title":"Remove http snapshots or mockfiles — remove_mock_files","text":"Remove http snapshots mockfiles","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/remove_mock_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove http snapshots or mockfiles — remove_mock_files","text":"","code":"remove_mock_files()"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/remove_mock_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove http snapshots or mockfiles — remove_mock_files","text":"Invisibly mock file paths.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Docker iRODS Demonstration Service — use_irods_demo","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"Run iRODS demonstration server use_irods_demo() Docker container instance. function stop_irods_demo() stops containers.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"","code":"use_irods_demo(   user = character(),   pass = character(),   recreate = FALSE,   verbose = TRUE )  stop_irods_demo()"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"user Character vector user name (defaults \"rods\" admin) pass Character vector password (defaults \"rods\" admin password) recreate Boolean indicate whether recreate (reboot) iRODS demo server (defaults FALSE). Recreating destroy content current instance. verbose Verbosity (defaults TRUE).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"Invisible","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"functions untested Windows macOS require: bash docker docker-compose","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"https://github.com/irods/irods_demo","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/use_irods_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Docker iRODS Demonstration Service — use_irods_demo","text":"","code":"if (interactive()) {    # launch docker irods_demo containers (and possibly download images) with   # default credentials   use_irods_demo()    # same but then with \"alice\" as user and \"PASSword\" as password   use_irods_demo(\"alice\", \"PASSword\")    # stop containers   stop_irods_demo() }"},{"path":"https://irods.github.io/irods_client_library_rirods/news/index.html","id":"rirods-011","dir":"Changelog","previous_headings":"","what":"rirods 0.1.1","title":"rirods 0.1.1","text":"CRAN release: 2023-06-30 Supply configuration file correct user-specific configuration directory rappdirs::user_config_dir().","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/news/index.html","id":"rirods-010","dir":"Changelog","previous_headings":"","what":"rirods 0.1.0","title":"rirods 0.1.0","text":"Initial CRAN submission.","code":""}]
